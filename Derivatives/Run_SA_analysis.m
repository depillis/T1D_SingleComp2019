% N. Tania (May 30, 2018) 
% Generate Figures 5 and 6
% Sensitivity Analysis 


%--------------------------------------------------------------------------
clear all 
close all

% set ode solve accuracy
%global ODE_TOL DIFF_INC

ODE_TOL  = 1e-10;
DIFF_INC = sqrt(ODE_TOL);

% load parameter set generated by latin hypercube sampling
%parset = dlmread('psets_fullrange');
parset = dlmread('LHS.csv');

% number of parameter sets
% parameter orderings as listed in Table 2
Nrow = size(parset,1);  % row number     

% number of parameters
Npar = size(parset,2);
% number of variables
%Nvar = 3;

% time points
EndTime = 280; 
xdata = (0:1:EndTime)';
idx = min(xdata(xdata>200));

% initialize stored arrays
Nvar = 1; %only store glucose level 
SSstore = zeros(Nrow,Nvar);             % store steady state values     

% classical sensitivity
Norm2_store = zeros(Nrow,Npar);   % norm of sensitivity matrix column
Isens_2 = zeros(Nrow,Npar);       % ordering of norm
Isens_SVD = zeros(Nrow,Npar);     % binary sensitive/nonsensitive result from SVD/QR
SV_store = zeros(Nrow,Npar);      % singular values
rankSens = zeros(Nrow,1);              % rank of sensitvity matrix

% relative sensitivity
Rel_Norm2_store = zeros(Nrow,Npar);
Rel_Isens_2 = zeros(Nrow,Npar);
Rel_Isens_SVD = zeros(Nrow,Npar);
Rel_SV_store = zeros(Nrow,Npar);
Rel_rankSens = zeros(Nrow,1);

% track for numerical failures (ODE integration does not converge)
failSet = []; Nfail = 0;


%% LOOP THROUGH PARAMETERS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
parpool 
parfor jj =1:Nrow % row of LHS
%for jj =1:Nrow % row of LHS 

% An's modification Aug 27 
% Combine parameters and initial conditions in one vector pars 

jj

pars = parset(jj,:);

% sensitivity matrices for changes in parameter and initial conditions
[sens0, sensR, flagg, y, sol] = senseq(pars,xdata);

    
if flagg == 0           % check for numerical failure (rare case)
% store steady state value
SSstore(jj,:) = y(:,end);

%% compute ordering for standard sensitivity matrix 
sens = sens0;

% SVD ranking %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
[U,S,V] = svd(sens);
rankSens(jj) = rank(S,DIFF_INC*10);
% partition V into two blocks
Vsens = V(:,1:rankSens(jj));
% do QR on Vsens
[Q,R,P] = qr(Vsens');
% use permutation matrix to group sensitive pars
par_order = P'*(1:Npar)';
% the sensitive parameters are
Isens_SVD(jj,:) = par_order';
SV_store(jj,:) = diag(S)'; % what is this for?

 % binary marker on whether parameter is sensitive (1) or not (0)
sens_group = zeros(Npar,1);
sens_group(par_order(1:rankSens(jj))) = 1;     
Sens_Group(jj,:) = sens_group;

%% ranking sensitivity using norm2 sensitivity matrix for 200<t<280
sens_norm = vecnorm(sens(idx:end,:),2); %2-norm of matrx sens(idx:end)
[Rsens,Isens] = sort(sens_norm,'descend');
Isens_2(jj,:) = Isens;
Norm2_store(jj,:) = sens_norm;


%% compute ordering for relative sensitivity matrix 
sens = sensR;

% SVD ranking %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
[U,S,V] = svd(sens);

Rel_rankSens(jj) = rank(S,DIFF_INC*10);
% partition V into two blocks
Vsens = V(:,1:Rel_rankSens(jj));
% do QR on Vsens
[Q,R,P] = qr(Vsens');
% use permutation matrix to group sensitive pars
par_order = P'*(1:Npar)';
% the sensitive parameters are
Rel_Isens_SVD(jj,:) = par_order';
Rel_SV_store(jj,:) = diag(S)';

 % binary marker on whether parameter is sensitive (1) or not (0)
sens_group = zeros(Npar,1);
sens_group(par_order(1:Rel_rankSens(jj))) = 1;
Rel_Sens_Group(jj,:) = sens_group;

%% ranking relative sensitivity using norm2 sensitivity matrix for 200<t<280
% norm of sensitivity matrix (use only t>600, idx:end) %%%%%%%%%%%%%%%
sens_norm = vecnorm(sens(idx:end,:),2);
[Rsens,Isens] = sort(sens_norm,'descend');
Rel_Isens_2(jj,:) = Isens;
Rel_Norm2_store(jj,:) = sens_norm;



%% keep track of integration failure
else
 failSet = [failSet, jj];
 Nfail = Nfail+1;
end

end

save Run_SA_analysis.mat



